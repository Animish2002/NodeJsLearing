REST API IN json

const users = require("./MOCK_DATA.json")

GET /users -List of all users
then we do 
app.get("/api/users",(req,res)=>{
    res.json(users);
})

GET /api/user/1  -Get user by id
GET /api/user/2  -Get user by id
JSON.stringify     // this coverts a javascript object in a string so that it is easy change/manipulate

app.get("./api/users/:id",(req,res)=>{                      //get user by id
    const id = Number(req.params.id);                       //to extract the id that is there in the url and  covert it to Number
    const user = users.find(user => user.id === id);        // to find the matching id of the user in the users array 
    if(!user) return res.status(400).json(error: "User not Found!");
    res.json(user);
})


app.patch("./api/users/:id",(req,res)=>{                            //patch user by id (put)
    // Extract the ID from the URL and convert it to a number
    const userid = Number(req.params.id);
    
    // Find the index of the user with the matching ID
    const userIndex = users.findIndex(user => user.id === userid);
    
    // If no user is found, return a 404 status with an error message
    if (userIndex === -1) {
        return res.status(404).json({ error: "No such user present" });
    }
    
    // Update the user object with the new data from the request body
    users[userIndex] = { ...users[userIndex], ...req.body };
    
    // Write the updated users array back to the JSON file
    fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err) => {
        if (err) {
            // If there's an error writing the file, return a 500 error
            return res.status(500).json({ error: "Internal Server Error" });
        }
        
        // If successful, return the updated user object
        res.json({ status: "Success", user: users[userIndex] });
    })
})



app.delete("./api/users/:id".(req,res)=>{
    const id = Number(req.params.id); // Extracts the user ID from the URL and converts it to a number.
  const userIndex = users.findIndex((user) => user.id === id); // Finds the index of the user with the matching ID.
  if (userIndex === -1) return res.status(404).json({ error: "User not found" }); // If the user is not found, return a 404 error.
  users.splice(userIndex, 1); // Remove the user from the users array.
  fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err) => { // Write the updated users array back to the JSON file.
    if (err) return res.status(500).json({ error: "Internal Server Error" }); // If there's an error writing the file, return a 500 error.
    res.json({ status: "Success", message: "User deleted successfully" }); // If successful, return a success message.
  });
})

app.post("/api/user", (req, res) => {
  // it is used to create new user
  // get the data from the request body
  const body = req.body;
  // create a new user object by spreading the body properties and adding an id
  const newUser = { ...body, id: users.length  1 };
  // add the new user to the users array
  users.push(newUser);
  // write the updated users array to the MOCK_DATA.json file
  fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err, data) => {
    // if there is an error, log it
    if (err) {
      console.error("Failed to write to file:", err);
    }
    // return the new user object with the status "Pending" and the id
    return res.json({ status: "Pending", id: newUser.id });
  });
});