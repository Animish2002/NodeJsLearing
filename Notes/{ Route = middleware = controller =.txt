{ Route => middleware => controller => Route }
User => model ahe database sathi
Route => itha route declare kelay kuthlya route ka kai logic or kai functionality honar 
controller => handles the logic if a new user sign in's or login's
middleware => validates/ checks request data for signup and  login before it reached the controller function



Flow for a New User Sign Up

1. Client Request:

The user submits a signup form on the frontend, sending a POST request to the /signup route with their details (e.g., name, email, password, etc.).
Route Handling:

The Express application receives this request at the /signup route defined in your router.

2. Middleware Validation:

The signupValidation middleware is triggered.
Purpose: This middleware checks the request data against the predefined Joi schema.
Outcome:
If the data is invalid (e.g., missing required fields, incorrect email format), the middleware returns a 400 Bad Request response with an error message. The request flow stops here.
If the data is valid, the middleware passes the request to the next step, which is the controller.

3. Controller Logic:

The signup controller function is called.
Purpose: This function contains the business logic for creating a new user.
Typical Operations:
Hashing the password for security.
Creating a new user document with the provided details.
Saving the user data in the MongoDB database.
Generating a JWT for the newly created user (if required).
Outcome:
If user creation is successful, the controller might send a success response back to the client, often including a token or some user details.
If there's an error (e.g., email already exists, database error), the controller sends a failure response with an appropriate error message.
Database Interaction:

The controller interacts with MongoDB via a model (using Mongoose or a similar library) to save the new user's data in the database.
Outcome:
If the data is successfully saved, it returns to the controller to proceed with the response.
If there's an issue (e.g., duplicate email, connection error), an error is returned to the controller.

4. Controller Response:

Based on the outcome of the database operation, the controller sends a response to the client.
Success Response: Usually includes a status code (e.g., 201 Created), a success message, and possibly a token.
Failure Response: Includes a status code (e.g., 400 Bad Request or 500 Internal Server Error) and an error message.
Client Receives Response:

The frontend receives the response and acts accordingly:
Success: Redirects the user, stores the token, or displays a success message.
Failure: Displays the error message to the user for corrective action.
Flow Summary:
Middleware: Validates the request data.
Controller: Handles the business logic of user creation.
Database: Stores the user information.
Controller: Sends the final response (success or failure) back to the client.
This flow ensures that each part of the system handles a specific responsibility, making the application easier to manage, debug, and scale.